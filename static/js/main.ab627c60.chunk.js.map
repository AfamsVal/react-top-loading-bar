{"version":3,"sources":["../../src/useInterval.ts","../../src/utils.ts","../../src/index.tsx","App.js","changeColor.js","index.js"],"names":["noop","randomInt","min","max","Math","forwardRef","height","className","color","background","transitionTime","loaderSpeed","waitingTime","shadow","useState","active","startingValue","refreshRate","value","initialLoaderStyle","transition","width","loaderContainerStyle","position","top","left","zIndex","initialShadowStyles","boxShadow","opacity","transform","useImperativeHandle","ref","continuousStart","pressedStaticStart","console","val","setPressedContinuous","localProgressSet","checkIfFull","staticStart","pressedContinuous","setStaticStartPressed","complete","useEffect","loaderStyleSet","shadowStyleSet","progress","setUsingProps","_progress","setTimeout","onLoaderFinished","_loaderStyle","callback","delay","immediate","savedCallback","useRef","id","setInterval","clearInterval","useInterval","random","localProgress","style","loaderStyle","shadowStyle","App","setProgress","barColor","setBarColor","buttonsColor","setButtonsColor","usingRef","setUsingRef","saveToClipboard","text","navigator","clipboard","writeText","then","window","alert","onClick","language","current","colors","currentColor","filter","x","length","changeColor","refMode","target","rel","href","data-color-scheme","data-size","data-show-count","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab627c60.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  // eslint-disable-next-line no-unused-vars\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => {}\n  className?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n}\n\nconst LoadingBar = forwardRef(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n    }: IProps,\n    ref\n  ) => {\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={className} style={loaderContainerStyle}>\n        <div style={loaderStyle}>\n          {shadow ? <div style={shadowStyle} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default LoadingBar\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport LoadingBar from \"react-top-loading-bar\";\nimport \"./index.css\";\nimport { changeColor } from \"./changeColor\";\nimport Highlight from \"react-highlight\";\n\nconst App = () => {\n  const [progress, setProgress] = useState(0);\n  const [barColor, setBarColor] = useState(\"#f11946\");\n  const [buttonsColor, setButtonsColor] = useState(\"red\");\n  const ref = useRef(null);\n  const [usingRef, setUsingRef] = useState(false);\n\n  const saveToClipboard = (text) => {\n    navigator.clipboard.writeText(text).then(() => {\n      window.alert(\"Copied To Clipboard\");\n    });\n  };\n\n  const changeMode = (refMode) => {\n    if (refMode) {\n      setProgress(0);\n    }\n\n    setUsingRef(refMode);\n  };\n\n  return (\n    <div>\n      {usingRef ? (\n        <LoadingBar color={barColor} ref={ref} shadow={true} />\n      ) : (\n        <LoadingBar\n          color={barColor}\n          progress={progress}\n          onLoaderFinished={() => setProgress(0)}\n        />\n      )}\n\n      <div className=\"text-container\">\n        <h1 className=\"header\">react-top-loading-bar</h1>\n        <div className=\"inline\">\n          <code\n            className=\"package-install-text\"\n            onClick={() => saveToClipboard(\"npm i react-top-loading-bar\")}\n          >\n            npm i react-top-loading-bar\n          </code>\n          <br />\n          or\n          <br />\n          <code\n            className=\"package-install-text\"\n            onClick={() => saveToClipboard(\"yarn add react-top-loading-bar\")}\n          >\n            yarn add react-top-loading-bar\n          </code>\n        </div>\n      </div>\n      <div className=\"buttons-group\">\n        <Highlight language=\"javascript\" className=\"code-highlighter\">\n          {usingRef\n            ? `const ref = useRef(null);\\n<LoadingBar color={barColor} ref={ref} />\\nref.current.continuousStart()`\n            : `const [progress,setProgress] = useState(0);\\n<LoadingBar color={barColor} progress={progress}\n    onLoaderFinished={() => setProgress(0)} />`}\n        </Highlight>\n        <br />\n        {usingRef ? (\n          <div>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => ref.current.continuousStart()}\n            >\n              Start Continuous Loading Bar\n            </button>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => ref.current.staticStart()}\n            >\n              Start Static Loading Bar\n            </button>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => ref.current.complete()}\n            >\n              Complete\n            </button>\n            <br />\n          </div>\n        ) : (\n          <div>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => setProgress(progress + 10)}\n            >\n              Add 10%\n            </button>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => setProgress(progress + 30)}\n            >\n              Add 30%\n            </button>\n            <button\n              className={\"btn \" + buttonsColor}\n              onClick={() => setProgress(progress + 50)}\n            >\n              Add 50%\n            </button>\n\n            <br />\n          </div>\n        )}\n\n        <button\n          className={\"btn \" + buttonsColor}\n          onClick={() => {\n            const colors = changeColor(buttonsColor);\n            setBarColor(colors.barColor);\n            setButtonsColor(colors.color);\n          }}\n        >\n          Change Color\n        </button>\n        <button\n          className={\"btn \" + buttonsColor}\n          onClick={() => changeMode(!usingRef)}\n        >\n          Change to {usingRef ? \"State\" : \"Refs\"} Mode\n        </button>\n        <a\n          className={\"btn \" + buttonsColor}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={\n            usingRef\n              ? \"https://github.com/klendi/react-top-loading-bar/blob/master/example/examples/exampleWithRef.js\"\n              : \"https://github.com/klendi/react-top-loading-bar/blob/master/example/examples/exampleWithState.js\"\n          }\n        >\n          Example\n        </a>\n        <br />\n        <br />\n        <div className=\"github-buttons\">\n          <a\n            className=\"github-button\"\n            href=\"https://github.com/klendi/react-top-loading-bar\"\n            data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n            data-size=\"large\"\n            data-show-count=\"true\"\n            aria-label=\"Star klendi/react-top-loading-bar on GitHub\"\n          >\n            Star\n          </a>{\" \"}\n          <a\n            className=\"github-button\"\n            href=\"https://github.com/klendi\"\n            data-color-scheme=\"no-preference: light; light: light; dark: dark;\"\n            data-size=\"large\"\n            data-show-count=\"true\"\n            aria-label=\"Follow @klendi on GitHub\"\n          >\n            Follow @klendi\n          </a>\n        </div>\n        <br />\n        <div>\n          Made with ❤️ by{\" \"}\n          <a\n            href=\"https://klendi.dev\"\n            style={{ color: barColor }}\n            target=\"_blank\"\n          >\n            Klendi Gocci\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const changeColor = (currentColor) => {\n  function randomInt(min, max) {\n    let i = (Math.random() * 32768) >>> 0\n    return (i % (min - max)) + min\n  }\n  let colors = ['red', 'purple', 'green', 'teal', 'orange', 'blue']\n  colors = colors.filter((x) => x !== currentColor)\n  let i = randomInt(0, colors.length)\n\n  const color = colors[i]\n\n  let barColor = ''\n  switch (color) {\n    case 'red':\n      barColor = '#f11946'\n      break\n    case 'purple':\n      barColor = '#8800ff'\n      break\n    case 'green':\n      barColor = '#28b485'\n      break\n    case 'teal':\n      barColor = '#00ffe2'\n      break\n    case 'orange':\n      barColor = '#ff7c05'\n      break\n    case 'blue':\n      barColor = '#2998ff'\n      break\n\n    default:\n      barColor = '#f11946'\n      break\n  }\n  return { barColor, color }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}