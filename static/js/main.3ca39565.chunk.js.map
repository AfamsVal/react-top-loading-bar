{"version":3,"sources":["../../src/useInterval.ts","../../src/utils.ts","../../src/index.tsx","App.js","changeColor.js","index.js"],"names":["noop","randomInt","min","max","Math","floor","random","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","loaderContainerStyle","position","top","left","zIndex","width","initialShadowStyles","boxShadow","opacity","transition","transform","loaderStyle","loaderStyleSet","shadowStyle","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","useEffect","callback","delay","savedCallback","_progress","setTimeout","_loaderStyle","useRef","current","id","setInterval","clearInterval","React","style","App","setProgress","barColor","setBarColor","buttonsColor","setButtonsColor","usingRef","setUsingRef","saveToClipboard","text","navigator","clipboard","writeText","then","window","alert","onClick","language","colors","currentColor","filter","x","length","changeColor","changeMode","refMode","target","rel","href","data-color-scheme","data-size","data-show-count","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ca39565.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  // eslint-disable-next-line no-unused-vars\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => {}\n  className?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n}\n\nconst LoadingBar = forwardRef(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n    }: IProps,\n    ref\n  ) => {\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={className} style={loaderContainerStyle}>\n        <div style={loaderStyle}>\n          {shadow ? <div style={shadowStyle} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default LoadingBar\n","import React, { useEffect, useState, useRef } from 'react'\n\nimport LoadingBar from 'react-top-loading-bar'\nimport './index.css'\nimport { changeColor } from './changeColor'\nimport Highlight from 'react-highlight'\n\n\nconst App = () => {\n  const [progress, setProgress] = useState(0)\n  const [barColor, setBarColor] = useState('#f11946')\n  const [buttonsColor, setButtonsColor] = useState('red')\n  const ref = useRef(null)\n  const [usingRef, setUsingRef] = useState(false)\n\n  const saveToClipboard = (text) => {\n    navigator.clipboard.writeText(text).then(() => {\n      window.alert('Copied To Clipboard')\n    })\n  }\n\n  const changeMode = refMode => {\n    if(refMode) {\n      setProgress(0)\n    }\n\n    setUsingRef(refMode)\n  }\n\n  return (\n    <div>\n      {usingRef ? <LoadingBar color={barColor} ref={ref} shadow={true}/> :\n        <LoadingBar color={barColor} progress={progress} onLoaderFinished={() => setProgress(0)}/>}\n\n      <div className='text-container'>\n        <h1 className='header'>react-top-loading-bar</h1>\n        <div className='inline'>\n          <code\n            className='package-install-text'\n            onClick={() => saveToClipboard('npm i react-top-loading-bar')}\n          >\n            npm i react-top-loading-bar\n          </code>\n          <br/>\n          or\n          <br/>\n          <code\n            className='package-install-text'\n            onClick={() => saveToClipboard('yarn add react-top-loading-bar')}\n          >\n            yarn add react-top-loading-bar\n          </code>\n        </div>\n      </div>\n      <div className='buttons-group'>\n        <Highlight language=\"javascript\" className=\"code-highlighter\">\n          {usingRef ? `const ref = useRef(null);\\n<LoadingBar color={barColor} ref={ref} />\\nref.current.continuousStart()` : `const [progress,setProgress] = useState(0);\\n<LoadingBar color={barColor} progress={progress}\n    onLoaderFinished={() => setProgress(0)} />`}\n        </Highlight>\n        <br/>\n        {usingRef ? <div>\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => ref.current.continuousStart()}\n            >\n              Start Continuous Loading Bar\n            </button>\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => ref.current.staticStart()}\n            >\n              Start Static Loading Bar\n            </button>\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => ref.current.complete()}\n            >\n              Complete\n            </button>\n            <br/>\n          </div> :\n          <div>\n\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => setProgress(progress + 10)}\n            >\n              Add 10%\n            </button>\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => setProgress(progress + 30)}\n            >\n              Add 30%\n            </button>\n            <button\n              className={'btn ' + buttonsColor}\n              onClick={() => setProgress(progress + 50)}\n            >\n              Add 50%\n            </button>\n\n            <br/>\n          </div>\n        }\n\n        <button\n          className={'btn ' + buttonsColor}\n          onClick={() => {\n            const colors = changeColor(buttonsColor)\n            setBarColor(colors.barColor)\n            setButtonsColor(colors.color)\n          }}\n        >\n          Change Color\n        </button>\n        <button\n          className={'btn ' + buttonsColor}\n          onClick={() => changeMode(!usingRef)}\n        >\n          Change to {usingRef ? 'State' : 'Refs'} Mode\n        </button>\n        <a\n          className={'btn ' + buttonsColor}\n          target='_blank'\n          rel='noopener noreferrer'\n          href={ usingRef ? 'https://github.com/klendi/react-top-loading-bar/blob/master/example/src/examples/exampleWithRef.js' : 'https://github.com/klendi/react-top-loading-bar/blob/master/example/src/examples/exampleWithState.js'}\n        >\n          Example\n        </a>\n        <br/>\n        <br/>\n        <div className='github-buttons'>\n          <a className=\"github-button\" href=\"https://github.com/klendi/react-top-loading-bar\"\n             data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-size=\"large\"\n             data-show-count=\"true\" aria-label=\"Star klendi/react-top-loading-bar on GitHub\">Star</a>{' '}\n          <a className=\"github-button\" href=\"https://github.com/klendi\"\n             data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-size=\"large\"\n             data-show-count=\"true\" aria-label=\"Follow @klendi on GitHub\">Follow @klendi</a>\n        </div>\n        <br/>\n        <div>\n          Made with ❤️ by{' '}\n          <a\n            href='https://klendi.dev'\n            style={{ color: barColor }}\n            target='_blank'\n          >\n            Klendi Gocci\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export const changeColor = (currentColor) => {\n  function randomInt(min, max) {\n    let i = (Math.random() * 32768) >>> 0\n    return (i % (min - max)) + min\n  }\n  let colors = ['red', 'purple', 'green', 'teal', 'orange', 'blue']\n  colors = colors.filter((x) => x !== currentColor)\n  let i = randomInt(0, colors.length)\n\n  const color = colors[i]\n\n  let barColor = ''\n  switch (color) {\n    case 'red':\n      barColor = '#f11946'\n      break\n    case 'purple':\n      barColor = '#8800ff'\n      break\n    case 'green':\n      barColor = '#28b485'\n      break\n    case 'teal':\n      barColor = '#00ffe2'\n      break\n    case 'orange':\n      barColor = '#ff7c05'\n      break\n    case 'blue':\n      barColor = '#2998ff'\n      break\n\n    default:\n      barColor = '#f11946'\n      break\n  }\n  return { barColor, color }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}